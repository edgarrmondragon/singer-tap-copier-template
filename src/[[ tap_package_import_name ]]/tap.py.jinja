"""[[ tap_source_name ]] tap class."""

from typing import List, Type

from singer_sdk import Stream, Tap
from singer_sdk import typing as th
from singer_sdk.streams import [[ tap_stream_type ]]Stream

# TODO: Import your custom stream types here:
from [[ tap_package_import_name ]].streams import Groups, Users

# TODO: Compile a list of custom stream types here
#       OR rewrite discover_streams() below with your custom logic.
STREAM_TYPES: List [%-raw-%] [ [%-endraw-%] Type [%-raw-%] [ [%-endraw-%] [[ tap_stream_type ]]Stream [%-raw-%] ] [%-endraw-%] [%-raw-%] ] [%-endraw%] = [
    Users,
    Groups,
]


class Tap[[ tap_source_id ]](Tap):
    """Singer tap for [[ tap_source_name ]]."""

    name = "[[ tap_id ]]"

    # TODO: Update this section with the actual config values you expect:
    config_jsonschema = th.PropertiesList(
[%- if tap_auth_method in ("OAuth2", "JWT") %]
        th.Property(
            "client_id",
            th.StringType,
            required=True,
            description="Client ID to authenticate in [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method == "API Key" %]
        th.Property(
            "api_key",
            th.StringType,
            required=True,
            description="API Key for [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method == "Bearer Token" %]
        th.Property(
            "token",
            th.StringType,
            required=True,
            description="API Token for [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method in ("OAuth2", "JWT", "Basic Auth") %]
        th.Property(
            "username",
            th.StringType,
            required=True,
            description="Username in [[ tap_source_name ]]",
        ),
        th.Property(
            "password",
            th.StringType,
            required=True,
            description="Password in [[ tap_source_name ]]",
        ),
[%- endif %]
        th.Property(
            "start_date",
            th.DateTimeType,
            description="Earliest datetime to get data from",
        ),
    ).to_dict()

    def discover_streams(self) -> List[Stream]:
        """Return a list of discovered streams.

        Returns:
            A list of [[ tap_source_name ]] streams.
        """
        return [stream_class(tap=self) for stream_class in STREAM_TYPES]
