[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "[[ tap_package_distribution_name ]]"
description = "Singer tap for [[ tap_source_name ]], built with the Meltano SDK for Singer Taps."
readme = "README.md"
keywords = [
  "ELT",
  "[[ tap_source_name ]]",
  "singer.io",
]
license.file = "LICENSE"
maintainers = [
  { name = "[[ author_fullname ]]", email = "[[ author_email ]]" },
]
authors = [
  { name = "[[ author_fullname ]]", email = "[[ author_email ]]" },
]
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "version",
]
dependencies = [
  [%- if tap_stream_type == 'GraphQL' or tap_auth_method == 'Basic Auth' %]
  "requests>=2,<3",
  [%- endif %]
  [%- if tap_auth_method == 'JWT' %]
  "singer-sdk[jwt]~=0.43.1",
  [%- else %]
  "singer-sdk~=0.43.1",
  [%- endif %]
]
optional-dependencies.dev = [
  "[[ tap_package_distribution_name ]][testing,typing]",
]
optional-dependencies.testing = [
  "deptry>=0.12",
  "pytest>=8",
  "singer-sdk[testing]",
]
optional-dependencies.typing = [
  "mypy",
  [%- if tap_stream_type == 'GraphQL' or tap_auth_method == 'Basic Auth' %]
  "types-requests",
  [%- endif %]
]
urls.Documentation = "https://[[ repository_provider ]]/[[ repository_namespace ]]/[[ repository_name ]]#readme"
urls.Homepage = "https://[[ repository_provider ]]/[[ repository_namespace ]]/[[ repository_name ]]"
urls.Repository = "https://[[ repository_provider ]]/[[ repository_namespace ]]/[[ repository_name ]]"
scripts."[[ tap_package_command_line_name ]]" = "[[ tap_package_import_name ]].tap:Tap[[ tap_source_id ]].cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.default.env-vars]
UV_PRERELEASE = "allow"

[tool.hatch.envs.default.overrides]
env.GITHUB_ACTIONS.dev-mode = { value = false, if = [
  "true",
] }

[tool.hatch.envs.sync.scripts]
console = "[[ tap_package_command_line_name ]] {args}"
jsonl = "[[ tap_package_command_line_name ]] {args} > [[ tap_package_distribution_name ]].jsonl"

[tool.hatch.envs.test]
features = [
  "testing",
]
[tool.hatch.envs.test.scripts]
integration = "pytest {args:tests}"
dependencies = "deptry ."

[tool.hatch.envs.all]
template = "test"
[% raw %][[tool.hatch.envs.all.matrix]][% endraw %]
python = [
  "3.9",
  "3.10",
  "3.11",
  "3.12",
  "3.13",
]

[tool.hatch.envs.typing]
features = [
  "testing",
  "typing",
]
[tool.hatch.envs.typing.scripts]
check = "mypy --strict {args:[[ tap_package_import_name ]] tests}"

[tool.ruff]
line-length = 88
lint.select = [
  "ALL",
]
lint.ignore = [
  "COM812", # missing-trailing-comma
  "DJ",     # flake8-django
  "FIX002", # line-contains-todo
  "ISC001", # single-line-implicit-string-concatenation
  "PD",     # pandas-vet
]
lint.per-file-ignores."tests/*" = [
  "ANN201", # missing-return-type-public-function
  "S101",   # assert
  "SLF001", # private-member-access
]
lint.unfixable = [
  "ERA001", # commented-out-code
]
lint.flake8-annotations.allow-star-arg-any = true
lint.isort.known-first-party = [
  "[[ tap_package_import_name ]]",
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.pydocstyle.convention = "google"

[tool.deptry.package_module_name_map]
mypy = "mypy"
pytest = "pytest"
[[ tap_package_distribution_name ]] = "[[ tap_package_import_name ]]"
types-requests = "requests"

[tool.deptry.per_rule_ignores]
DEP002 = [
  "deptry",
  "mypy",
  "pytest",
]

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
addopts = "-vvv --durations=10"

[tool.mypy]
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[% raw %][[tool.mypy.overrides]][% endraw %]
ignore_missing_imports = true
module = [
  "backoff.*",
]
