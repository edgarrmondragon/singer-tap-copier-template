[%- set prefix = tap_id|replace('-', '_')|upper -%]

[%- if tap_auth_method in ("OAuth2", "JWT") -%]
[%- set passenv = [prefix + '_CLIENT_ID'] -%]
[%- elif tap_auth_method == "API Key" -%]
[%- set passenv = [prefix + '_API_KEY'] -%]
[%- elif tap_auth_method == "Bearer Token" -%]
[%- set passenv = [prefix + '_TOKEN'] -%]
[%- elif tap_auth_method in ("OAuth2", "JWT", "Basic Auth") -%]
[%- set passenv = [prefix + '_USERNAME', prefix + '_PASSWORD'] -%]
[%- else -%]
[%- set passenv = [] -%]
[%- endif %]

[[- passenv.append(prefix + '_START_DATE') or "" -]]

name: Test [[ tap_id ]]

on:
  push:
    branches: [main]
    paths:
    - [[ tap_package_import_name ]]/**
    - tests/**
    - pyproject.toml
    - .github/workflows/test.yml
    - .github/workflows/constraints.txt
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
    - [[ tap_package_import_name ]]/**
    - tests/**
    - pyproject.toml
    - .github/workflows/test.yml
    - .github/workflows/constraints.txt
  workflow_dispatch:
  schedule:
  # Run weekly on Monday at 12:00 PM UTC
  - cron: "0 12 * * 1"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: "1"
      PIP_CONSTRAINT: ${{ github.workspace }}/.github/workflows/constraints.txt
    strategy:
      fail-fast: false
      matrix:
        script: ["test:integration"]
        python-version:
        - "3.9"
        - "3.10"
        - "3.11"
        - "3.12"
        - "3.13"
        include:
        - { script: "test:dependencies", python-version: "3.12" }
        - { script: "typing:check",      python-version: "3.12" }

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: pip

    - name: Upgrade pip
      run: |
        pip install pip
        pip --version

    - name: Upgrade pip in virtual environments
      shell: python
      run: |
        import os
        import pip

        with open(os.environ["GITHUB_ENV"], mode="a") as io:
            print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

    - name: Install Hatch
      run: |
        pipx install hatch
        hatch --version

    - name: Run tests
      env:
        HATCH_PYTHON: ${{ matrix.python-version }}
        HATCH_VERBOSE: "1"
        [%- for env in passenv %]
        [[ env ]]: ${{ secrets.[[ env ]] }}
        [%- endfor %]
      run: |
        hatch run ${{ matrix.script }}

[%- if repository_visibility == 'private' %]

  pre-commit:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: "1"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - uses: pre-commit/action@v3.0.1
    - uses: pre-commit-ci/lite-action@v1.0.2
      if: always()
[%- endif %]
