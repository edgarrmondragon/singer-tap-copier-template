"""[[ tap_source_name ]] tap class."""

from __future__ import annotations

import typing as t

from singer_sdk import Stream, Tap
from singer_sdk import typing as th

# TODO([[ author_username ]]): Import your custom stream types here:
from [[ tap_package_import_name ]] import streams

if t.TYPE_CHECKING:
    from singer_sdk.streams import [[ tap_stream_type ]]Stream

# TODO([[ author_username ]]): Compile a list of custom stream types here
# OR rewrite discover_streams() below with your custom logic.
STREAM_TYPES: list [%-raw-%] [ [%-endraw-%] type [%-raw-%] [ [%-endraw-%] [[ tap_stream_type ]]Stream[t.Any] [%-raw-%] ] [%-endraw-%] [%-raw-%] ] [%-endraw%] = [
    streams.Users,
    streams.Groups,
]


class Tap[[ tap_source_id ]](Tap):
    """Singer tap for [[ tap_source_name ]]."""

    name = "[[ tap_id ]]"

    # TODO([[ author_username ]]): Update this section with the actual config
    # values you expect:
    config_jsonschema = th.PropertiesList(
[%- if tap_auth_method in ("OAuth2", "JWT") %]
        th.Property(
            "client_id",
            th.StringType,
            required=True,
            secret=True,
            title="Client ID",
            description="Client ID to authenticate in [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method == "API Key" %]
        th.Property(
            "api_key",
            th.StringType,
            required=True,
            secret=True,
            title="API Key",
            description="API Key for [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method == "Bearer Token" %]
        th.Property(
            "token",
            th.StringType,
            required=True,
            secret=True,
            title="API Token",
            description="API Token for [[ tap_source_name ]]",
        ),
[%- elif tap_auth_method in ("OAuth2", "JWT", "Basic Auth") %]
        th.Property(
            "username",
            th.StringType,
            required=True,
            title="Username",
            description="Username in [[ tap_source_name ]]",
        ),
        th.Property(
            "password",
            th.StringType,
            required=True,
            secret=True,
            title="Password",
            description="Password in [[ tap_source_name ]]",
        ),
[%- endif %]
        th.Property(
            "start_date",
            th.DateTimeType,
            title="Start Date",
            description="Earliest datetime to get data from",
        ),
    ).to_dict()

    def discover_streams(self) -> list[Stream]:
        """Return a list of discovered streams.

        Returns:
            A list of [[ tap_source_name ]] streams.
        """
        return [stream_class(tap=self) for stream_class in STREAM_TYPES]
