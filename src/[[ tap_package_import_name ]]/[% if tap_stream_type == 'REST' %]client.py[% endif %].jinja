[%- set base_stream = tap_source_id + 'Stream' -%]
[%- set builtin_auth = {
    "API Key": "APIKeyAuthenticator",
    "Bearer Token": "BearerTokenAuthenticator",
    "Basic Auth": "BasicAuthenticator",
} -%]
[%- set authenticator = tap_source_id + 'Authenticator' -%]

"""REST client handling, including [[ base_stream ]] base class."""

from __future__ import annotations

from typing import Any

from singer_sdk import [[ tap_stream_type ]]Stream

[%- if tap_auth_method in builtin_auth %]
from singer_sdk.authenticators import [[ builtin_auth[tap_auth_method] ]]
[%- endif %]

[%- if tap_auth_method in ("OAuth2", "JWT") %]

from [[ tap_package_import_name ]].auth import [[ authenticator ]]
[%- endif %]


class [[ base_stream ]]([[ tap_stream_type ]]Stream):
    """[[ tap_source_name ]] stream class."""

    url_base = "https://api.mysample.com"
    records_jsonpath = "$[*]"  # Or override `parse_response`.
    next_page_token_jsonpath = "$.next_page"  # noqa: S105

[%- if tap_auth_method in ("OAuth2", "JWT") %]

    @property
    def authenticator(self) -> [[ authenticator ]]:
        """Get an authenticator object.

        Returns:
            The authenticator instance for this REST stream.
        """
        return [[ authenticator ]].create_for_stream(self)

[%- elif tap_auth_method == "API Key" %]

    @property
    def authenticator(self) -> APIKeyAuthenticator:
        """Get an authenticator object.

        Returns:
            The authenticator instance for this REST stream.
        """
        api_key: str = self.config["api_key"]
        return APIKeyAuthenticator.create_for_stream(
            self,
            key="x-api-key",
            value=api_key,
            location="header",
        )

[%- elif tap_auth_method == "Bearer Token" %]

    @property
    def authenticator(self) -> BearerTokenAuthenticator:
        """Get an authenticator object.

        Returns:
            The authenticator instance for this REST stream.
        """
        token: str = self.config["token"]
        return BearerTokenAuthenticator.create_for_stream(
            self,
            token=token,
        )

[%- elif tap_auth_method == "Basic Auth" %]

    @property
    def authenticator(self) -> BasicAuthenticator:
        """Get an authenticator object.

        Returns:
            The authenticator instance for this REST stream.
        """
        username = self.config["username"]
        password = self.config["password"]

        return BasicAuthenticator.create_for_stream(
            self,
            username=username,
            password=password,
        )

[%- endif %]

    @property
    def http_headers(self) -> dict:
        """Return the http headers needed.

        Returns:
            A dictionary of HTTP headers.
        """
        return {"User-Agent": f"{self.tap_name}/{self._tap.plugin_version}"}

    def get_url_params(
        self,
        context: dict | None,  # noqa: ARG002
        next_page_token: Any | None,  # noqa: ARG002
    ) -> dict[str, Any]:
        """Get URL query parameters.

        Args:
            context: Stream sync context.
            next_page_token: Next offset.

        Returns:
            Mapping of URL query parameters.
        """
        params: dict = {}
        return params
